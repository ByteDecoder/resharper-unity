using System;
using System.Collections;
using System.Collections.Generic;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Jobs.LowLevel.Unsafe;

namespace Unity
{
    namespace Jobs
    {
        [JobProducerType]
        public interface IJob
        {
            void Execute();
        }

        namespace LowLevel
        {
            namespace Unsafe
            {
                public class JobProducerTypeAttribute : Attribute
                {
                }
            }
        }
    }

    namespace Burst
    {
        public class BurstCompileAttribute : Attribute
        {
        }

        public class BurstDiscardAttribute : Attribute
        {
        }

    }

    namespace Collections
    {
        public struct NativeArray<T> : IDisposable, IEnumerable<T>, IEnumerable, IEquatable<NativeArray<T>>
            where T : struct
        {
            public void Dispose()
            {
                throw new NotImplementedException();
            }

            public IEnumerator<T> GetEnumerator()
            {
                throw new NotImplementedException();
            }

            IEnumerator IEnumerable.GetEnumerator()
            {
                return GetEnumerator();
            }

            public bool Equals(NativeArray<T> other)
            {
                throw new NotImplementedException();
            }
        }
    }
}

public class NewBehaviourScript
{
    [BurstCompile]
    struct PrimitiveTest : IJob
    {
        public void MustBeProhibited()
        {
            string str2 = |"asdasd"|(0); 
            string str1 = null; 
            |str1|(1) = |str2|(2); 
            char c = |str2|(3)[0];
            var ch = 'a';
            char ch2 = 'b';
            ch2 = ch;
            ch = 'd';
            char ch3 = new char();
        }

        public void Execute()
        {
            var varInt = 1;
            int intInt = 1;
            var newInt = new int();
            newInt = 1;
            MustBeProhibited();
        }
    }

    [BurstCompile]
    struct ExceptionsText : IJob
    {
        public void Execute()
        {
            F();
        }

        private void F()
        {
            throw new ArgumentException("exception");
            |new ArgumentException(||new object()|(6).ToString()|(5))|(4);
            |try|(7) 
            {
                int a = 1;
            }
            |catch|(8) (Exception e) 
            {
                int b = 2;
            }
            |finally|(9) 
            {
                int c = 2;
            }
        }
    }

    [BurstCompile]
    struct FunctionParametersReturnValueTest : IJob
    {
        public interface IInterface
        {
            void function();
        }

        public struct strct : IInterface
        {
            public void function()
            {
            }
        }

        public void Fobject(object a)
        {
        }

        public void Finterface(IInterface @interface)
        {
        }

        public void Fstruct(strct strct)
        {
        }

        public IInterface FReturn()
        {
            return new strct();
        }

        public void GenericF<T>(T a) where T : struct, IInterface
        {
            a.function();
        }

        public void Execute()
        {
            |Fobject(null)|(10); 
            |Finterface(null)|(11); 
            Fstruct(new strct());
            |FReturn()|(12); 
            GenericF(new strct());
        }
    }

    [BurstCompile]
    struct ForeachTest : IJob
    {
        public void Execute()
        {
            |foreach|(13) (var integer in new NativeArray<int>())
            {
                Console.WriteLine(integer);
            }
        }
    }

    public static SimpleClass myClasss = new SimpleClass();

    [BurstCompile]
    struct MethodsInvocationTest : IJob
    {
        public void Execute()
        {
            F();
        }

        public override int GetHashCode()
        {
             return |base.GetHashCode()|(14);
        }

        private void F()
        {
            SimpleClass.StaticMethod();
            |GetType()|(15); 
            |Equals(null, null)|(16);
            |Equals(null)|(17);
            |ToString()|(18); 
            GetHashCode();
            var cls = |myClasss|(19);
            |myClasss|(20).PlainMethod(); 
        }
    }

    private enum MyEnum
    {
        enumElem1,
        enumElem2
    }

    [BurstCompile]
    struct ReferenceExpressionTest : IJob
    {
        private static int getSetProp { get; set; }
        private static int field1 = 2;
        private readonly static int field2 = 2;
        private const int field3 = 2;
        private static int getProp { get; }
        private MyEnum ourEnum;

        public void Execute()
        {
            SimpleClass myClass = |new SimpleClass()|(21);
            |getSetProp|(22) = 2;
            |field1|(23) = 2;
            ourEnum = ourEnum;
        }
    }

    public class SimpleClass
    {
        public static void StaticMethod()
        {
        }

        public void PlainMethod()
        {
        }
    }
    
    [BurstCompile]
    struct BurstDiscardTest : IJob
    {
        public void Execute()
        {
            F();
            D();
        }

        [BurstDiscard]
        void F()
        {
            var current = new object();
        }

        void D()
        {
            var current = |new object()|(24);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Warning: BC1033: Loading a managed string literal is not supported
(1): ReSharper Warning: BC1042: The managed class type `String` is not supported.
(2): ReSharper Warning: BC1042: The managed class type `String` is not supported.
(3): ReSharper Warning: BC1042: The managed class type `String` is not supported.
(4): ReSharper Warning: BC1021: Creating a managed object `ArgumentException` is not supported
(5): ReSharper Warning: BC1001: Unable to access the managed method `ToString` from type `Object`.
(6): ReSharper Warning: BC1021: Creating a managed object `Object` is not supported
(7): ReSharper Warning: BC1005: The `try` construction is not supported.
(8): ReSharper Warning: BC1037: The `try` construction (e.g `foreach`/`using`) is not supported
(9): ReSharper Warning: BC1036: The `finally` construction (e.g `foreach`/`using`) is not supported
(10): ReSharper Warning: BC1016: The managed function `Fobject` is not supported.
(11): ReSharper Warning: BC1016: The managed function `Finterface` is not supported.
(12): ReSharper Warning: BC1016: The managed function `FReturn` is not supported.
(13): ReSharper Warning: BC1037: The `try` construction (e.g `foreach`/`using`) is not supported
(14): ReSharper Warning: BC1001: Unable to access the managed method `GetHashCode` from type `ValueType`.
(15): ReSharper Warning: BC1001: Unable to access the managed method `GetType` from type `Object`.
(16): ReSharper Warning: BC1001: Unable to access the managed method `Equals` from type `Object`.
(17): ReSharper Warning: BC1001: Unable to access the managed method `Equals` from type `ValueType`.
(18): ReSharper Warning: BC1001: Unable to access the managed method `ToString` from type `ValueType`.
(19): ReSharper Warning: BC1042: The managed class type `NewBehaviourScript` is not supported. Loading from a non-readonly static field `myClasss` is not supported
(20): ReSharper Warning: BC1042: The managed class type `NewBehaviourScript` is not supported. Loading from a non-readonly static field `myClasss` is not supported
(21): ReSharper Warning: BC1021: Creating a managed object `SimpleClass` is not supported
(22): ReSharper Warning: BC1034: Writing to a static field `getSetProp__backing_field` is not supported
(23): ReSharper Warning: BC1034: Writing to a static field `field1` is not supported
(24): ReSharper Warning: BC1021: Creating a managed object `Object` is not supported
